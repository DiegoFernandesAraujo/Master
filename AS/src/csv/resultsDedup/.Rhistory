library(GGally)
theme_set(theme_bw())
library(resample)
library(gridExtra)
library(tidyr)
library(DT)
library(scales)
squish_trans <- function(from, to, factor) {
trans <- function(x) {
# get indices for the relevant regions
isq <- x > from & x < to
ito <- x >= to
# apply transformation
x[isq] <- from + (x[isq] - from)/factor
x[ito] <- from + (to - from)/factor + (x[ito] - to)
return(x)
}
inv <- function(x) {
# get indices for the relevant regions
isq <- x > from & x < from + (to - from)/factor
ito <- x >= from + (to - from)/factor
# apply transformation
x[isq] <- from + (x[isq] - from) * factor
x[ito] <- to + (x[ito] - (from + (to - from)/factor))
return(x)
}
# return the transformation
return(trans_new("squished", trans, inv))
}
formata_label = function(l){
format(l, big.mark = ".", scientific = FALSE, trim = TRUE, decimal.mark = ",")
}
# as = read.csv("~/dados/estatisticas.csv", sep=";")
as = read.csv("./dados/bases-de-dados/cds-musicais/estatisticas.csv", sep=";")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(resample)
library(GGally)
theme_set(theme_bw())
library(resample)
library(gridExtra)
library(tidyr)
library(DT)
library(scales)
squish_trans <- function(from, to, factor) {
trans <- function(x) {
# get indices for the relevant regions
isq <- x > from & x < to
ito <- x >= to
# apply transformation
x[isq] <- from + (x[isq] - from)/factor
x[ito] <- from + (to - from)/factor + (x[ito] - to)
return(x)
}
inv <- function(x) {
# get indices for the relevant regions
isq <- x > from & x < from + (to - from)/factor
ito <- x >= from + (to - from)/factor
# apply transformation
x[isq] <- from + (x[isq] - from) * factor
x[ito] <- to + (x[ito] - (from + (to - from)/factor))
return(x)
}
# return the transformation
return(trans_new("squished", trans, inv))
}
formata_label = function(l){
format(l, big.mark = ".", scientific = FALSE, trim = TRUE, decimal.mark = ",")
}
# as = read.csv("~/dados/estatisticas.csv", sep=";")
as = read.csv("./dados/bases-de-dados/cds-musicais/estatísticas2/estatisticas.csv", sep=";")
# ds = read.csv("~/dados/estatisticaInicialDS3.csv", sep=";")
ds = read.csv("./dados/bases-de-dados/cds-musicais/estatísticas2/estatisticaInicialDS3.csv", sep=";")
asNEW = as %>%
filter((algoritmosUtilizados == 10 & iteracao == 9) | (algoritmosUtilizados == 15 & iteracao == 14) | (algoritmosUtilizados == 20 & iteracao == 19))
dsNEW = ds %>%
filter(etapa == "3 - clasf")
all = rbind(asNEW, dsNEW)
glimpse(all)
summary(all)
all %>%
filter(abordagem == 'AS') %>%
summary()
all %>%
filter(abordagem == 'DS') %>%
summary()
mediasInsp = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(media = mean(inspecoesManuais)) #%>% #View()
#ggplot(mapping = aes(x = algoritmosUtilizados, y = media)) +
p = ggplot(mediasInsp, mapping = aes(x = algoritmosUtilizados)) +
scale_x_discrete(limits=c(10, 15, 20)) +
geom_line(size = 2, aes(y = media, color = abordagem)) +
geom_point(aes(y = media, color = abordagem), size=5) + #Tirei o size de dentro do aes, para evitar que aparecesse na legenda
labs(x = "Quantidade de algoritmos utilizados", y = "Média de inspeções manuais realizadas")  + scale_colour_discrete(name = "Abordagem")
print(p)
ggsave("insp-medias.png", width = 6, height = 5)
medias = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(media = mean(inspecoesManuais)) #%>% #View()
#ggplot(mapping = aes(x = algoritmosUtilizados, y = media)) +
desviosP = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(desvioPadrao = sd(inspecoesManuais))
coefVar = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(coeficienteVariacao = sd(inspecoesManuais)/mean(inspecoesManuais))
ggplot(medias, mapping = aes(x = algoritmosUtilizados)) +
scale_x_discrete(limits=c(10, 15, 20)) +
geom_line(size = 2, aes(y = media, color = abordagem)) +
geom_point(aes(y = media, color = abordagem), size=5) + #Tirei o size de dentro do aes, para evitar que aparecesse na legenda
geom_text(data = desviosP, aes(y = medias$media + 50, label = round(desviosP$desvioPadrao,3))) +
geom_text(data = coefVar, aes(y = medias$media - 50, label = round(coefVar$coeficienteVariacao,2))) +
labs(x = "Quantidade de algoritmos utilizados", y = "Média das inspeções manuais realizadas")
p = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(media = mean(f.measure)) %>% #View()
#ggplot(mapping = aes(x = algoritmosUtilizados, y = media)) +
ggplot(mapping = aes(x = algoritmosUtilizados)) +
scale_x_discrete(limits=c(10, 15, 20)) +
geom_line(size = 2, aes(y = media, color = abordagem)) +
geom_point(aes(y = media, color = abordagem), size=5) + #Tirei o size de dentro do aes, para evitar que aparecesse na legenda
#geom_text(aes(y = desvioPadrao, color = abordagem), size=5) +
# scale_y_continuous(limits = c(0, 1.0), breaks = seq(0,1.0, by = 0.1)) +
scale_y_continuous(limits = c(0, 1.0)) +
labs(x = "Quantidade de algoritmos utilizados", y = "Média de F-Measures obtidos") + scale_colour_discrete(name = "Abordagem")
print(p)
ggsave("f1-medios-escala-completa.png", width = 6, height = 5)
p = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(media = mean(f.measure)) %>% #View()
#ggplot(mapping = aes(x = algoritmosUtilizados, y = media)) +
ggplot(mapping = aes(x = algoritmosUtilizados)) +
scale_x_discrete(limits=c(10, 15, 20)) +
geom_line(size = 2, aes(y = media, color = abordagem)) +
geom_point(aes(y = media, color = abordagem), size=5) + #Tirei o size de dentro do aes, para evitar que aparecesse na legenda
#geom_text(aes(y = desvioPadrao, color = abordagem), size=5) +
labs(x = "Quantidade de algoritmos utilizados", y = "Média de F-Measures obtidos") + scale_colour_discrete(name = "Abordagem")
print(p)
ggsave("f1-medios.png", width = 6, height = 5)
p = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(media = mean(f.measure)) %>% #View()
#ggplot(mapping = aes(x = algoritmosUtilizados, y = media)) +
ggplot(mapping = aes(x = algoritmosUtilizados, y = media)) +
scale_x_discrete(limits=c(10, 15, 20)) +
geom_col(aes(fill = abordagem), position = "dodge") +
scale_y_continuous(breaks = seq(0,0.95, by = 0.05)) +
#geom_point(aes(y = media, color = abordagem), size=5) + #Tirei o size de dentro do aes,
# geom_line(size = 2, aes(y = media, color = abordagem)) +
# geom_point(aes(y = media, color = abordagem), size=5) + #Tirei o size de dentro do aes, para evitar que aparecesse na legenda
labs(x = "Quantidade de algoritmos utilizados", y = "Média de F-Measures obtidos") + guides(fill=guide_legend(title="Abordagem"))
print(p)
ggsave("f1-medios-col.png", width = 6, height = 5)
medias = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(media = mean(f.measure)) #%>% #View()
#ggplot(mapping = aes(x = algoritmosUtilizados, y = media)) +
desviosP = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(desvioPadrao = sd(f.measure))
coefVar = all %>%
group_by(abordagem, algoritmosUtilizados) %>% #View()
summarise(coeficienteVariacao = sd(f.measure)/mean(f.measure))
ggplot(medias, mapping = aes(x = algoritmosUtilizados)) +
scale_x_discrete(limits=c(10, 15, 20)) +
geom_line(size = 2, aes(y = media, color = abordagem)) +
geom_point(aes(y = media, color = abordagem), size=5) + #Tirei o size de dentro do aes, para evitar que aparecesse na legenda
# geom_text(data = desviosP, aes(y = medias$media + 0.005, label = round(desviosP$desvioPadrao,3))) +
geom_text(data = coefVar, aes(y = medias$media + 0.005, label = round(coefVar$coeficienteVariacao,2))) +
labs(x = "Quantidade de algoritmos utilizados", y = "Média das inspeções manuais realizadas")
algs = c(10, 15, 20)
for(i in algs){
alg10 = all %>%
# filter(abordagem == 'AS' && algoritmosUtilizados == i)
filter(algoritmosUtilizados == i) %>%
filter(abordagem == 'AS')
cat("Resumo dos dados para ", i, "algoritmos na abordagem AS: \n" )
print(summary(alg10$inspecoesManuais))
alg10 = all %>%
# filter(abordagem == 'AS' && algoritmosUtilizados == i)
filter(algoritmosUtilizados == i) %>%
filter(abordagem == 'DS')
cat("Resumo dos dados para ", i, "algoritmos na abordagem DS: \n" )
print(summary(alg10$inspecoesManuais))
cat(" \n")
}
algs = c(10, 15, 20)
for(i in algs){
plot <-  all %>%
filter(algoritmosUtilizados == i) %>%
# ggplot(mapping = aes(x = "count", y = inspecoesManuais, fill = abordagem)) +
# geom_boxplot() +
# geom_point(aes(col = abordagem), position = position_jitter(width = 0.1, height = 0.1), size = 2, alpha = 0.5)
ggplot(mapping = aes(x = "count", y = inspecoesManuais)) +
geom_boxplot()  +
geom_point(aes(col = abordagem), position = position_jitter(width = 0.1, height = 0.1), size = 2, alpha = 0.5)
print(plot)
plot <-  all %>%
filter(algoritmosUtilizados == i) %>%
ggplot(mapping = aes(x = "count", y = inspecoesManuais, fill = abordagem)) +
geom_boxplot() +
geom_point(aes(col = abordagem), position = position_jitter(width = 0.1, height = 0.1), size = 2, alpha = 0.5)
print(plot)
}
for(i in algs){
var = paste("desvio",as.character(i), sep = "")
desvio <-  all %>%
filter(algoritmosUtilizados == i)
#assign(var, desvio)
cat("Desvio-padrão dos usuários C:", sd(assign(var, desvio)$inspecoesManuais) )
cat('\n')
}
desvios = list(desvio10, desvio15, desvio20)
for(i in desvios){
#print(desvios)
#var = paste("desvio",as.character(i), sep = "")
#print(var)
#print(assign(var, desvio))
#print(mean(assign(var, desvio)$inspecoesManuais))
# desvio <-  all %>%
#     filter(algoritmosUtilizados == i)
#assign(var, desvio)
#
coefVarC = sd(i$inspecoesManuais)/mean(i$inspecoesManuais)
cat("Coeficiente de variação referente aos usuários C: ", coefVarC)
cat('\n')
}
algs = c(10, 15, 20)
for(i in algs){
var = paste("all",as.character(i), sep = "")
all2 =
all %>% filter(algoritmosUtilizados == i) #%>% View()
assign(var, all2)
}
cont = 10
alls = list(all10, all15, all20)
for(i in alls){
b.dif.media = bootstrap2(i$inspecoesManuais,
treatment = i$abordagem,
mean)
media.dif = CI.percentile(b.dif.media, probs = c(.025, .975))
media.dif
var2 = paste("media.dif.insp",as.character(cont), sep = "")
assign(var2, media.dif)
cont = cont + 5
plot <- data.frame(media.dif) %>%
# ggplot(aes(x = "Diferença", ymin = X5., ymax = X95.)) +
ggplot(aes(x = "Diferença", ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2) +
geom_hline(yintercept = 0, colour = "blue")
testeDF2 = as.data.frame(b.dif.media$replicates) %>%
select(media = `mean: AS-DS`) #%>%
testeDF2=testeDF2 %>% tibble::rownames_to_column()
plot2 <- ggplot(testeDF2, aes(x = testeDF2$media )) +
geom_histogram(colour = "darkorange", fill = "white", size = 1 ) +
geom_vline(aes(xintercept = media.dif[1,1]), colour = "blue", size = 1) +
geom_vline(aes(xintercept = media.dif[1,2]), colour = "blue", size = 1) +
geom_vline(aes(xintercept = mean(testeDF2$media)), colour = "red", size = 1) +
annotate("text", x = media.dif[1,1] + 2, y=1000, label= round(media.dif[1,1], 2)) +
annotate("text", x = media.dif[1,2] + 2, y=1000, label = round(media.dif[1,2], 2))
print(plot)
print(plot2)
print(media.dif)
}
dfX = data.frame(rbind(media.dif.insp10, media.dif.insp15, media.dif.insp20))
dfX$medida = row.names(dfX)
p = dfX %>%
#ggplot(aes(x = medida, ymin = X2.5., ymax = X97.5.)) +
ggplot(mapping = aes(x = c("10", "15", "20"), ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2, size = 1) +
#geom_errorbar(data = df3, aes(x = c("Annealing Standard", "Maioria", "Unanimidade"), ymin = X2.5., ymax = X97.5.), width = .2) +
geom_hline(yintercept = 0, colour = "blue") +
geom_vline(xintercept = 1.5, size = 1, colour = "grey") +
geom_vline(xintercept = 2.5, size = 1, colour = "grey") +
labs(y = "Diferença entre a quantidade de \n inspeções manuais geradas (AS-DS)", x = "Quantidade de algoritmos utilizados")
print(p)
ggsave("dif_insp.png", width = 6, height = 5)
alls = list(all10, all15, all20)
cont = 10
alls = list(all10, all15, all20)
for(i in alls){
b.dif.media = bootstrap2(i$f.measure,
treatment = i$abordagem,
mean)
media.dif = CI.percentile(b.dif.media, probs = c(.025, .975))
media.dif
var3 = paste("media.dif.f1.",as.character(cont), sep = "")
assign(var3, media.dif)
cont = cont + 5
plot <- data.frame(media.dif) %>%
# ggplot(aes(x = "Diferença", ymin = X5., ymax = X95.)) +
ggplot(aes(x = "Diferença", ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2) +
geom_hline(yintercept = 0, colour = "blue")
testeDF2 = as.data.frame(b.dif.media$replicates) %>%
select(media = `mean: AS-DS`) #%>%
testeDF2=testeDF2 %>% tibble::rownames_to_column()
plot2 <- ggplot(testeDF2, aes(x = testeDF2$media )) +
geom_histogram(colour = "darkorange", fill = "white", size = 1 ) +
geom_vline(aes(xintercept = media.dif[1,1]), colour = "blue", size = 1) +
geom_vline(aes(xintercept = media.dif[1,2]), colour = "blue", size = 1) +
geom_vline(aes(xintercept = mean(testeDF2$media)), colour = "red", size = 1) +
annotate("text", x = media.dif[1,1] + 0.0003, y=1000, label= round(media.dif[1,1], 3)) +
annotate("text", x = media.dif[1,2] + 0.0003, y=1000, label = round(media.dif[1,2], 3))
print(plot)
print(plot2)
print(media.dif)
}
dfX = data.frame(rbind(media.dif.f1.10, media.dif.f1.15, media.dif.f1.20))
dfX$medida = row.names(dfX)
p = dfX %>%
#ggplot(aes(x = medida, ymin = X2.5., ymax = X97.5.)) +
ggplot(mapping = aes(x = c("10", "15", "20"), ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2, size = 1) +
#geom_errorbar(data = df3, aes(x = c("Annealing Standard", "Maioria", "Unanimidade"), ymin = X2.5., ymax = X97.5.), width = .2) +
geom_hline(yintercept = 0, colour = "blue") +
geom_vline(xintercept = 1.5, size = 1, colour = "grey") +
geom_vline(xintercept = 2.5, size = 1, colour = "grey") +
labs(y = "Diferença entre os f-measures gerados (AS-DS)", x = "Quantidade de algoritmos utilizados")
print(p)
ggsave("dif_f1.png", width = 6, height = 5)
print("Inspeções manuais:")
for(i in alls){
pvalor = permutationTest2(i, mean(inspecoesManuais), treatment = abordagem)
print(pvalor)
}
print("F-measures:")
for(i in alls){
pvalor = permutationTest2(i, mean(f.measure), treatment = abordagem)
print(pvalor)
}
# algoritmos = read.csv2("~/dados/TodasEstatisticasDedup.csv", sep=";")
algoritmos = read.csv2("./dados/TodasEstatisticasDedup.csv", sep=";")
glimpse(algoritmos)
algoritmos = algoritmos %>%
select(Algoritmo, Precision, Recall, F.Measure)
algoritmos %>%
# ggplot(aes(x = Precision, stat = "count" )) +
ggplot(aes(Precision)) + geom_histogram()
# geom_histogram(colour = "darkorange", fill = "white")
algoritmos %>%
# ggplot(aes(x = Precision, stat = "count" )) +
ggplot(aes(Recall)) + geom_histogram()
# geom_histogram(colour = "darkorange", fill = "white")
algoritmos %>%
# ggplot(aes(x = Precision, stat = "count" )) +
ggplot(aes(F.Measure)) +
# + geom_histogram(binwidth = 0.1)
geom_histogram()
algoritmos %>%
# group_by(Algoritmo) %>% #View()
# summarise(media = mean(inspecoesManuais)) %>% #View()
#mapping = aes(x = "count", y = users)
ggplot(mapping = aes(x = Precision, y = Recall, fill = Algoritmo)) +
#scale_y_continuous(labels = scales::percent) +
scale_x_continuous() +
# scale_x_discrete(limits=c(10, 15, 20)) +
#xlim("10", "15", "20") +
#theme(axis.text.x = element_text(angle = 90)) +
#geom_line()
geom_point()
p = algoritmos %>%
ggplot(mapping = aes(y = F.Measure, x="count")) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.1), size = 2, alpha = 0.5, color = "red") + #ylim(0.4, 1)
# geom_point(position = position_jitter(width = 0.1), size = 2, alpha = 0.5, color = "navyblue") + #ylim(0.4, 1)
scale_y_continuous(breaks = seq(0.3,1.0, by = 0.05)) +
labs(y = "F-Measure") +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
print(p)
ggsave("f-measure-algs.png", width = 6, height = 7)
algoritmos %>%
ggplot(mapping = aes(y = Precision, x="count")) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.1), size = 2, alpha = 0.5, color = "green4") + #ylim(0.4, 1)
scale_y_continuous(breaks = seq(0.3,1.0, by = 0.05))
algoritmos %>%
ggplot(mapping = aes(y = Recall, x="count")) +
geom_boxplot() +
geom_point(position = position_jitter(width = 0.1), size = 2, alpha = 0.5, color = "red") +
scale_y_continuous(breaks = seq(0,1.0, by = 0.05))
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
files <- list.files()
# data <- lapply(files,function(x) read.csv(x))
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
files <- list.files()
data <- lapply(files,function(x) read.csv(x))
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
files <- list.files(pattern = "\\.csv$")
# data <- lapply(files,function(x) read.csv(x))
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
files <- list.files(pattern = "\\.csv$")
data <- lapply(files,function(x) read.csv(x))
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
files <- list.files(pattern = "\\.csv$")
data <- lapply(files,function(x) read.csv(x))
data %>% View()
library(tidyr)
library(tidyr)
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
files <- list.files(pattern = "\\.csv$")
data <- lapply(files,function(x) read.csv(x))
data %>% View()
library(tidyr)
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
files <- list.files(pattern = "\\.csv$")
data <- lapply(files,function(x) read.csv(x))
data_rbind <- do.call("rbind", data)
View(data_rbind)
library(tidyr)
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
files <- list.files(pattern = "\\.csv$")
data <- lapply(files,function(x) read.csv(x, sep=";"))
data_rbind <- do.call("rbind", data)
View(data_rbind)
View(data_rbind)
View(data_rbind)
View(data_rbind)
View(data_rbind)
library(tidyr)
#Especificação do diretório padrão
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
#Leitura de todos os csv do diretório padrão
files <- list.files(pattern = "\\.csv$")
#
data <- lapply(files,function(x) read.csv(x, sep=";"))
data_rbind <- do.call("rbind", data)
data_rbind %>%
select(similaridade) %>%
ggplot(geom_histogram())
library(tidyr)
#Especificação do diretório padrão
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
#Leitura de todos os csv do diretório padrão
files <- list.files(pattern = "\\.csv$")
#
data <- lapply(files,function(x) read.csv(x, sep=";"))
data_rbind <- do.call("rbind", data)
data_rbind %>%
select(similaridade) %>%
ggplot(geom_histogram())
data_rbind %>%
select(similaridade)
eapply(.GlobalEnv,typeof)
data_rbind = as.data.frame(data_rbind)
data_rbind %>%
select(similaridade)
data_rbind2 = as.data.frame(data_rbind)
data_rbind2 %>%
select(similaridade)
eapply(.GlobalEnv,typeof)
data_rbind2 %>% View()
data_rbind2 %>%
ggplot(geom_histogram())
data_rbind2 = data.frame(t(sapply(data_rbind,c)))
data_rbind2 %>%
ggplot(geom_histogram())
View(data_rbind2)
eapply(.GlobalEnv,typeof)
df <- data.frame(matrix(unlist(data_rbind), nrow=132, byrow=T))
View(df)
df <- data.frame(matrix(unlist(data_rbind), byrow=T))
View(df)
data_rbind2 = data.frame(t(sapply(data_rbind,c)))
data_rbind2 %>%
ggplot(geom_histogram())
data_rbind2 = as.data.frame(data_rbind2)
data_rbind2 %>%
ggplot(geom_histogram())
df = data.frame(
lNames = rep(names(data_rbind2), lapply(myList, length)),
lVal = unlist(myList))
df = data.frame(
lNames = rep(names(data_rbind), lapply(data_rbind, length)),
lVal = unlist(data_rbind))
View(df)
View(data_rbind)
data_rbind %>%
ggplot(geom_histogram())
desvio %>%
ggplot(geom_histogram())
library(DT)
library(tidyverse)
library(resample)
library(GGally)
theme_set(theme_bw())
library(resample)
library(gridExtra)
library(tidyr)
library(DT)
desvio %>%
ggplot(geom_histogram())
data_rbind %>%
ggplot(geom_histogram())
data_rbind %>%
ggplot(mapping = aes(x = similaridade)) +
geom_histogram(colour = "darkorange", fill = "white", size = 1 )
library(tidyr)
#Especificação do diretório padrão
setwd("C:\\Users\\Diego\\Documents\\NetBeansProjects\\Master-SKYAM\\AS\\src\\csv\\resultsDedup")
#Leitura de todos os csv do diretório padrão
files <- list.files(pattern = "\\.csv$")
#
data <- lapply(files,function(x) read.csv(x, sep=";"))
data_rbind <- do.call("rbind", data)
eapply(.GlobalEnv,typeof)
data_rbind %>%
ggplot(mapping = aes(x = similaridade)) +
geom_histogram(colour = "darkorange", fill = "white", size = 1 )
