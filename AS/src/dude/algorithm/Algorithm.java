/*
 * DuDe - The Duplicate Detection Toolkit
 * 
 * Copyright (C) 2010  Hasso-Plattner-Institut f√ºr Softwaresystemtechnik GmbH,
 *                     Potsdam, Germany 
 *
 * This file is part of DuDe.
 * 
 * DuDe is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DuDe is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DuDe.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */

package dude.algorithm;

import java.util.Vector;

import dude.datasource.DataSource;
import dude.preprocessor.Preprocessor;
import dude.util.Cleanable;
import dude.util.data.AutoJsonable;
import dude.util.data.DuDeObject;
import dude.util.data.DuDeObjectPair;

/**
 * <code>Algorithm</code> collects all the methods that are needed by each algorithm implementation.
 * 
 * @author Matthias Pohl
 */
public interface Algorithm extends Iterable<DuDeObjectPair>, Cleanable, AutoJsonable {

	/**
	 * Adds a {@link DataSource} to the algorithm.
	 * 
	 * @param source
	 *            The <code>DataSource</code> that shall be added.
	 * 
	 * @throws NullPointerException
	 *             If <code>null</code> was passed.
	 */
	public void addDataSource(DataSource source);
	
	/**
	 * Unregisters all {@link DataSource}s.
	 */
	public void unregisterDataSources();

	/**
	 * Adds a default {@link Preprocessor} to this algorithm. This <code>Preprocessor</code> processes the data of all {@link DataSource}s.
	 * 
	 * @param preprocessor
	 *            The <code>Preprocessor</code> that shall be added. Passing <code>null</code> has no influence at all.
	 */
	public void addPreprocessor(Preprocessor preprocessor);

	/**
	 * Adds a {@link Preprocessor} for a specific {@link DataSource} to this algorithm. Only data from the passed <code>DataSource</code> will be
	 * processed by this <code>Preprocessor</code>. Passing <code>null</code> instead of a <code>Preprocessor</code> instance has no influence at all.
	 * 
	 * @param source
	 *            The corresponding <code>DataSource</code>. If <code>null</code> was passed instead of a <code>DataSource</code>,
	 *            {@link #addPreprocessor(Preprocessor)} is called.
	 * @param preprocessor
	 *            The <code>Preprocessor</code> that shall be added.
	 */
	public void addPreprocessor(DataSource source, Preprocessor preprocessor);

	/**
	 * Enables in-memory processing. This property is disabled by default.
	 */
	public void enableInMemoryProcessing();

	/**
	 * Disables in-memory processing. This property is disabled by default.
	 */
	public void disableInMemoryProcessing();

	/**
	 * Checks, whether in-memory processing is enabled.
	 * 
	 * @return <code>true</code>, if in-memory processing is enabled; otherwise <code>false</code>.
	 */
	public boolean inMemoryProcessingEnabled();

	/**
	 * Returns the overall data size after the extraction process is finished.
	 * 
	 * @return The number of extracted {@link DuDeObject}s or <code>0</code>, if the data was not extracted, yet.
	 */
	public int getDataSize();

	public Vector<DuDeObject> getExtractedData();
	/**
	 * Returns the data size of the passed {@link DataSource}.
	 * 
	 * @param source
	 *            The <code>DataSource</code> whose size shall be returned.
	 * @return The number of extracted {@link DuDeObject}s of the passed <code>DataSource</code> or <code>0</code>, if the data was not extracted,
	 *         yet.
	 * @throws IllegalArgumentException
	 *             If the passed <code>DataSource</code> is not attached to this algorithm instance.
	 * @throws NullPointerException
	 *             If null was passed.
	 */
	public int getDataSize(DataSource source) throws IllegalArgumentException, NullPointerException;

	/**
	 * Returns the number of pairs, that would be generated by the naive algorithm of the current instance's algorithm type based on the extracted
	 * data size. If no data was extracted, yet, <code>0</code> will be returned.
	 * 
	 * @return The number of pairs based on the extracted data size, that would be generated, if no reduction is done; or <code>0</code>, if the data
	 *         wasn't extracted, yet.
	 */
	public long getMaximumPairCount();
}
