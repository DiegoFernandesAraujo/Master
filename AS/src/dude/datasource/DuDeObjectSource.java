/*
 * DuDe - The Duplicate Detection Toolkit
 * 
 * Copyright (C) 2010  Hasso-Plattner-Institut f√ºr Softwaresystemtechnik GmbH,
 *                     Potsdam, Germany 
 *
 * This file is part of DuDe.
 * 
 * DuDe is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DuDe is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DuDe.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */

package dude.datasource;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import dude.util.data.DuDeObject;
import dude.util.data.storage.DuDeStorage;
import dude.util.data.storage.InMemoryStorage;
import dude.util.data.storage.JsonableReader;

/**
 * <code>DuDeObjectSource</code> is an in-memory {@link DataSource}. All the data is already within the memory. This class can be used to generate
 * data for <code>DuDe</code> in a fast and easy way.
 * 
 * @author Matthias Pohl
 */
public class DuDeObjectSource extends AbstractDataSource<DuDeObjectSource> {

	private final DuDeStorage<DuDeObject> data;

	private int size = 0;

	/**
	 * Initializes the <code>DuDeObjectSource</code> with the passed identifier and {@link DuDeStorage} instance.
	 * 
	 * @param id
	 *            The identifier of this {@link DataSource}. All {@link DuDeObject}s included in this <code>DataSource</code> have to have this
	 *            identifier as their source id.
	 * @param storage
	 *            The <code>DuDeStorage</code> containing the actual data.
	 */
	public DuDeObjectSource(String id, DuDeStorage<DuDeObject> storage) {
		super(id);

		try {
			this.data = storage == null ? new InMemoryStorage<DuDeObject>() : storage;
		} catch (IOException e) {
			throw new IllegalStateException(e);
		}
	}

	/**
	 * Initializes the <code>DuDeObjectSource</code> with the passed identifier and collection.
	 * 
	 * @param id
	 *            The identifier of the {@link DataSource}. All {@link DuDeObject}s contained in this <code>DataSource</code> must have this id as
	 *            source identifier.
	 * @param d
	 *            The internally used data.
	 */
	public DuDeObjectSource(String id, Collection<DuDeObject> d) {
		super(id);

		try {
			this.data = new InMemoryStorage<DuDeObject>(d == null ? new ArrayList<DuDeObject>() : d);
		} catch (IOException e) {
			throw new IllegalStateException(e);
		}
	}

	@Override
	public Iterator<DuDeObject> iterator() {
		// the extraction is done after calling iterator() the first time -> hence, the data size is not determined until this method is called
		this.size = this.data.size();

		JsonableReader<DuDeObject> reader = this.data.getReader();
		this.registerCloseable(reader);

		return reader.iterator();
	}

	@Override
	public void close() throws IOException {
		// nothing to do
	}

	@Override
	public void addIdAttributes(String... idAttributes) {
		throw new UnsupportedOperationException("The id's are already defined within the DuDeObjects.");
	}

	@Override
	protected boolean autoGeneratedIds() {
		throw new UnsupportedOperationException("The id's are already defined within the DuDeObjects.");
	}

	@Override
	protected Iterable<String> getIdAttributes() {
		throw new UnsupportedOperationException("The id's are already defined within the DuDeObjects.");
	}

	@Override
	public int getExtractedRecordCount() {
		// the size is determined while calling iterator() the first time -> returning this.data.size() instead of this.size would be invalid
		return this.size;
	}

}
